{
  "_args": [
    [
      {
        "raw": "mocked-backend",
        "scope": null,
        "escapedName": "mocked-backend",
        "name": "mocked-backend",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/elaineosbourn/Projects/makers_academy/freddy-news/news-app"
    ]
  ],
  "_from": "mocked-backend@latest",
  "_id": "mocked-backend@0.4.0",
  "_inCache": true,
  "_location": "/mocked-backend",
  "_nodeVersion": "0.12.7",
  "_npmUser": {
    "name": "callmehiphop",
    "email": "callmehiphop@gmail.com"
  },
  "_npmVersion": "2.13.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mocked-backend",
    "scope": null,
    "escapedName": "mocked-backend",
    "name": "mocked-backend",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/mocked-backend/-/mocked-backend-0.4.0.tgz",
  "_shasum": "57e7980f62417da4ae99ba7af7d852deac388c0f",
  "_shrinkwrap": null,
  "_spec": "mocked-backend",
  "_where": "/Users/elaineosbourn/Projects/makers_academy/freddy-news/news-app",
  "author": {
    "name": "David Gramlich"
  },
  "bugs": {
    "url": "https://github.com/callmehiphop/backend/issues"
  },
  "dependencies": {
    "glob-to-regexp": "0.0.1"
  },
  "description": "Mock network request responses in the browser",
  "devDependencies": {
    "brfs": "^1.2.0",
    "browserify": "^6.0.3",
    "chai": "^1.9.2",
    "gulp": "^3.8.8",
    "gulp-jshint": "^1.8.5",
    "jquery": "~2.1.4",
    "jshint-stylish": "^1.0.0",
    "karma": "^0.12.24",
    "karma-browserify": "^4.3.0",
    "karma-chai": "^0.1.0",
    "karma-mocha": "^0.1.9",
    "karma-phantomjs-launcher": "^0.1.4",
    "karma-spec-reporter": "0.0.13",
    "lodash": "^3.10.1",
    "mocha": "^1.21.4",
    "vinyl-source-stream": "^1.0.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "57e7980f62417da4ae99ba7af7d852deac388c0f",
    "tarball": "https://registry.npmjs.org/mocked-backend/-/mocked-backend-0.4.0.tgz"
  },
  "gitHead": "30d88a030a816846e3cae84ede99dd44ac1c73cf",
  "homepage": "https://github.com/callmehiphop/backend",
  "keywords": [
    "mock",
    "http",
    "backend",
    "xhr",
    "stub"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "callmehiphop",
      "email": "callmehiphop@gmail.com"
    }
  ],
  "name": "mocked-backend",
  "optionalDependencies": {},
  "readme": "# backend.js\n\n> No API? No problem!\n\n[![Travis Build Status](https://travis-ci.org/callmehiphop/backend.svg?branch=master)](https://travis-ci.org/callmehiphop/backend)\n\n## The *What*\n\nBased on AngularJS's [$httpBackend](https://docs.angularjs.org/api/ngMock/service/$httpBackend), backend.js allows you to mock API responses\nin the browser. Written in vanilla JavaScript, it has 0 dependencies, so you\nshould be able to use it in combination with any library and/or framework.\n\nbackend.js does not require any configurations. Simply drop the script in and\nstart mocking up some responses. It works by monkey patching the XMLHttpRequest\nconstructor, allowing all requests to be intercepted. If a request is made and a\nmocked response is found, backend.js simply serves up that response.\nAlternatively, if no mocked response is found, then the real XHR object is\ncalled to allow your request to pass through.\n\n## The *Why*\n\nOriginally, this project was started out of boredom! Then one day I found a need\nto stub responses in Web Workers, so I decided to revisit it and so it is.\n\n## Installation\n\n### npm\n\n```sh\n$ npm install --save-dev mocked-backend\n```\n\nThen just require it!\n\n```javascript\nvar backend = require('mocked-backend');\n```\n\n**Note:** backend is only intended to be used within a browser, a CJS module format\nis available for things like browserify\n\n### bower\n\n```sh\n$ bower install --save-dev backend\n```\n\nYou just need to include the `backend.js` file that comes with the bower install.\n\n## Examples\n\nStub a response:\n\n```javascript\n// supports globbing patterns!\nbackend.when('GET', '/api/users/*').respond({\n  name: 'Jake',\n  species: 'Dog',\n  magicPowers: true,\n  location: 'Ooooo'\n});\n```\n\nThen use XHR or any AJAX library you wish to do your tests (jQuery with [chai](http://chaijs.com/) should assertions below):\n\n```javascript\n$.getJSON('/api/users/jake', function (response) {\n  response.name.should.equal('Jake');\n  response.species.should.equal('Dog');\n});\n```\n\nDeclare ajax calls you expect in your test and verify they are called ([mocha](https://mochajs.org/) and jQuery shown below):\n\n```javascript\nbeforeEach(function() {\n  backend.expectPOST('/signup', {\n    username: 'Bob',\n    email: 'bob@gmail.com',\n    password: 'password'\n  }).respond(200, { userId: 3 })\n})\n\nafterEach(function() {\n  backend.verifyNoOutstandingExpectation()\n})\n\nit('should send a post to /signup when the form is filled out and completed', function() {\n  $('form.signup [name=\"username\"]').val('Bob');\n  $('form.signup [name=\"email\"]').val('bob@gmail.com');\n  $('form.signup [name=\"password\"]').val('password');\n  $('form.signup [type=\"submit\"]').click();\n})\n```\n\nAsync requests are not delayed by default. However, you can specific a different value if you need:\n\n```\nbackend.defaults.delay = 100;\n```\n\nand also provide per-stub delay value:\n\n```javascript\nbackend\n  .when('GET', '/api/users/*')\n  .options({\n    delay: 2000\n  })\n  .respond({\n    name: 'Jake',\n    species: 'Dog',\n    magicPowers: true,\n    location: 'Ooooo'\n  });\n```\n\nYou can also call `backend.flush` to syncrounously resolve any pending requests, and `verifyNoOutstandingRequest` to assert there are no requests in flight.\n\n## License\n\nMIT license\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/callmehiphop/backend.git"
  },
  "scripts": {
    "test": "gulp test"
  },
  "version": "0.4.0"
}
